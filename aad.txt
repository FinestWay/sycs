Practical 1:-

(1) Open MongoDB Compass: Search for MongoDB Compass in your applications or use your preferred method to open it.

(2) Connect to MongoDB Instance:
Click on "Connect" to connect to your MongoDB instance.
Enter the connection details like hostname, port, username, and password if required. If MongoDB is running on your local machine, the default settings should work.

(3) Create a Database & Collection:
After connecting, you'll see an option to create a new database. Click on it.
Enter the name of the database as "university" and click "Create Database".
Inside the "university" database, you'll see an option to add a new collection. Click on it.
Enter the name of the collection as "students" and click "Create Collection".

(4) Insert Document:
Now, select the "students" collection.
Click on the "Documents" tab.
Click on "Insert Document".
Copy the following JSON document and paste it into the editor:
json

Copy code :-

{
    "id": ObjectId("65hdgeolsebee996695058295"),
    "name": {
        "fn": "Srohit",
        "mn": "babi",
        "ln": "desai"
    },
    "address": {
        "city": "mumbai",
        "state": "Maharashtra",
        "country": "India"
    },
    "course": "Computer-science"
}
Click "Insert" to add the document to the collection.

________________________________________________________________________


Practical 2:-
use vcollege

Add Collections:
Copy code:-

db.createCollection("test")
db.createCollection("tl")

Insert Documents:-
Insert a document into the "test" collection:
Copy code:-

db.test.insertOne({
    "rollno": 17,
    "name": "rohit",
    "course": "sycs",
    "div": "A"
})

Insert multiple documents into the "tl" collection:
Copy code:-

db.tl.insertMany([
    {"rollno": 1, "name": "yash", "course": "sycs", "div": "A"},
    {"rollno": 2, "name": "Prince", "course": "Syit", "div": "B"},
    {"rollno": 3, "name": "Jignesh", "course": "Sycs", "div": "C"},
    {"rollno": 4, "name": "Pratik", "course": "Sybio", "div": "D"}
])

Read:
Find Documents:
To find all documents in the "test" collection:
Copy code:
db.test.find()

To find all documents in the "tl" collection:
Copy code:

db.tl.find()

Find One Document:
To find one document in the "test" collection:
Copy code:

db.test.findOne()

To find one document in the "tl" collection based on a specific condition (e.g., rollno: 43):
Copy code:-

db.tl.findOne({ "rollno": 43 })

Update:
Update Document:
To update a document in the "test" collection:
Copy code:-

db.test.updateOne(
    { "rollno": 17 },
    { $set: { "name": "updated_name" } }
)

To update a document in the "tl" collection based on a specific condition:
Copy code:-

db.tl.updateOne(
    { "rollno": 1 },
    { $set: { "name": "updated_name" } }
)

Delete:
Delete Document:
To delete a document from the "test" collection:
Copy code:-

db.test.deleteOne({ "rollno": 17 })

To delete a document from the "tl" collection based on a specific condition:
Copy code:-

db.tl.deleteOne({ "rollno": 1 })


______________________________________________________________________________



Practical: 3:-
<!-- Aim: Write a program for validation of a form using Angularjs. -->

<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Myapps</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <script src="https:/ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
</head>
<body ng-app>
  <h1>Try leaving the first input field blank</h1>
  <form name="myForm">
    <p>
    Name: <input type="text" name="myname" ng-model="myname" required>
    <span style="color: red;" ng-show="myForm.myname.$touched && myForm.myname.$invalid">Name is required</span>
    </p>
    <p>
      Address: <input type="text" name="myAddress" ng-model="myAddress" required>
      <span style="color: red;" ng-show="myForm.myAddress.$touched && myForm.myAddress.$invalid">Address is required</span>
    </p>  
  </form>
</body>
</html>
_____________________________________________________________________



Practical 4:-
<!-- Aim: Write a program to create and implement modules and controllers in Angularjs. -->

<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <title>Myapps</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
</head>

<body ng-app="myapp" ng-controller="myCtrl">
  <div>
    First Name: <input type="text" ng-model="firstName"> <br> <br>
    Last Name: <input type="text" ng-model="lastName"> <br>
    <p> {{fullNameFun()}} </p>
  </div>

  <script>
    const app = angular.module('myapp', []);
    app.controller('myCtrl', ($scope) => {
      $scope.firstName = "Nitesh";
      $scope.lastName = "Yadav";
      $scope.fullNameFun = () => {
        return $scope.firstName + " " + $scope.lastName;
      }
    });
  </script>
</body>

_________________________________________________________



Practical 5:-
<!-- Aim: Write a program to implement error handling in angular.js  -->

<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <title>Myapps</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link rel="stylesheet" href="styles.css">
  <script src="http://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
</head>

<body ng-app="myShoppingList" ng-controller="myCtrl">
  <div>
    <ul>
      <li class="cut" ng-repeat="x in products"> {{x}} 
        <span class="cut1" ng-click="removeItem($index)">x</span>
       </li>
    </ul>
    <input ng-model="addMe">
    <button ng-click="addItems()" >Add item</button>
    <p> {{errorText}} </p>
  </div>

  <script>
    const app = angular.module('myShoppingList', []);
    app.controller('myCtrl', ($scope) => {
      $scope.products = [];
      $scope.addItems = () => {
        $scope.errorText = "";
        if(!$scope.addMe) {return;}
        if($scope.products.indexOf($scope.addMe) == -1){
          $scope.products.push($scope.addMe);
        }
        else{
          $scope.errorText = "The item is already in your shopping list";
        }
      }
      $scope.removeItem = function(x){
        $scope.errorText = "";
        $scope.products.splice(x,1);
      }
    })
  </script>
</body>

</html>

_____________________________________________________________________


Practical 6:-

<!DOCTYPE html>
<html>

<head>
    <title>Angular Print Student Details from Data</title>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.9/angular.min.js"></script>
</head>

<body ng-app="myApp" ng-controller="myCtrl">

    <form>
        <label>Name:</label>
        <input type="text" ng-model="student.name"><br>
        <label>Email:</label>
        <input type="email" ng-model="student.email"><br>
        <label>Phone:</label>
        <input type="tel" ng-model="student.phone"><br>
        <label>Address:</label>
        <input type="text" ng-model="student.address"><br>
        <button ng-click="submit()">Submit</button>
    </form>

    <p ng-bind-html="output"></p>

    <script>
        var app = angular.module('myApp', []);
        app.controller('myCtrl', function($scope, $sce) {
            $scope.student = {};
            $scope.output = '';

            $scope.submit = function() {
                // Data
                $scope.output = "Name: " + $scope.student.name + "<br>" +
                    "Email: " + $scope.student.email + "<br>" +
                    "Phone: " + $scope.student.phone + "<br>" +
                    "Address: " + $scope.student.address;

                // Allowing HTML to be trusted
                $scope.output = $sce.trustAsHtml($scope.output);
            };
        });
    </script>

</body>

</html>

________________________________________________________________________


Practical 7:-

<!-- server.js -->
const express = require('express');
const app = express();

app.use(express.static('public'));

const PORT = 3000; // Define the port number

app.listen(PORT, () => {
    console.log(`Server listening on port ${PORT}`);
});


<!-- public/index.html -->
<!DOCTYPE html>
<html>

<head>
    <title>My AngularJS App</title>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
</head>

<body ng-app>
    <h2>Hello, {{ name }}!</h2>
    <input type="text" ng-model="name" placeholder="Enter your name">
</body>
</html>

______________________________________________________________________________


Practical 8:-

<!DOCTYPE html>
<html>

<head>
    <title>AngularJS Print Student Number</title>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
</head>

<body ng-app="myApp">

    <div ng-controller="myCtrl">
        <label for="numberInput">Enter your mobile number:</label>
        <input type="text" id="numberInput" ng-model="mobile">
        <p>Your Mobile number {{ mobile }}</p>
    </div>

    <script>
        var app = angular.module('myApp', []);
        app.controller('myCtrl', function($scope) {
            $scope.mobile = "1234567890";
        });
    </script>

</body>

</html>

________________________________________________________________________________

Practical 9:-

import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    const title = 'Gestures';
    return MaterialApp(
      title: title,
      home: MyHomePage(title: title),
    );
  }
}

class MyHomePage extends StatelessWidget {
  final String title;

  const MyHomePage({Key? key, required this.title}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(title),
        backgroundColor: Colors.purple,
      ),
      body: Center(
        child: MyButton(),
      ),
    );
  }
}

class MyButton extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        print('Button tapped');
      },
      child: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: Colors.blue,
          borderRadius: BorderRadius.circular(8),
        ),
        child: Text(
          'Tap Me',
          style: TextStyle(
            color: Colors.white,
            fontSize: 20,
          ),
        ),
      ),
    );
  }
}

